version: '3.9'
services:
  db:
    image: postgres:15.1-alpine
    restart: always
    env_file:
      - ./env/db.env
    volumes:
      - ./db:/var/lib/postgresql/data
    container_name: postgres
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER:-theuserisverywise} -d ${POSTGRES_DB:-main_database}'" ]
      interval: 5s
      timeout: 3s
      retries: 6

  redis:
    image: "redis:alpine"
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  django:
    restart: unless-stopped
    build:
      context: .
      dockerfile: dockerfiles/django.dockerfile
    volumes:
      - ./src:/usr/src/app:rw
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - ./env/django.env
      - ./env/db.env
      - ./env/cache.env
      - ./env/celery.env
    command: "/bin/sh -c 'python3 manage.py runserver $${SERVER_IP}:$${PORT}'"
    container_name: django

  celery-worker:
    restart: unless-stopped
    build:
      context: .
      dockerfile: dockerfiles/django.dockerfile
    command: celery -A main worker -l info
    volumes:
      - ./src:/usr/src/app:rw
    depends_on:
      - django
    env_file:
      - ./env/django.env
      - ./env/db.env
      - ./env/cache.env
      - ./env/celery.env
    container_name: celery-worker

  celery-beat:
    restart: unless-stopped
    build:
      context: .
      dockerfile: dockerfiles/django.dockerfile
    command: celery -A main beat -l info
    volumes:
      - ./src:/usr/src/app:rw
    depends_on:
      - django
    env_file:
      - ./env/django.env
      - ./env/db.env
      - ./env/cache.env
      - ./env/celery.env
    container_name: celery-beat
